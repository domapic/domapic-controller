{
  "tags": [{
    "name": "ability",
    "description": "Service ability"
  },{
    "name": "action",
    "description": "Service ability action"
  },{
    "name": "state",
    "description": "Service ability state"
  },{
    "name": "event",
    "description": "Service ability event"
  }],
  "components": {
    "schemas": {
      "Ability": {
        "description": "Ability data",
        "type": "object",
        "properties": {
          "_id": {
            "description": "Unique id of the ability",
            "type": "string"
          },
          "name": {
            "description": "Name of the ability",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]*$"
          },
          "_service": {
            "description": "Unique id of the service owner of the ability",
            "type": "string"
          },
          "_user": {
            "description": "Unique id of the user owner of the ability",
            "type": "string"
          },
          "description": {
            "description": "Description of the ability",
            "type": "string"
          },
          "event": {
            "description": "Ability is able to dispatch event",
            "type": "boolean"
          },
          "eventDescription": {
            "description": "Description of the ability event",
            "type": "string"
          },
          "action": {
            "description": "Ability is able to handle an action",
            "type": "boolean"
          },
          "actionDescription": {
            "description": "Description of the ability action",
            "type": "string"
          },
          "state": {
            "description": "Ability has an state",
            "type": "boolean"
          },
          "stateDescription": {
            "description": "Description of the ability state",
            "type": "string"
          },
          "type": {
            "description": "Type of ability data",
            "type": "string",
            "enum": ["string", "boolean", "number", "integer", "float"]
          },
          "format": {
            "description": "Format of ability data",
            "type": "string",
            "enum": ["date-time", "email", "hostname", "ipv4", "ipv6", "uri"]
          },
          "enum": {
            "description": "If present, ability data has to be one of these items",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "maxLength": {
            "description": "Max length of ability data",
            "type": "integer"
          },
          "minLength": {
            "description": "Min length of ability data",
            "type": "integer"
          },
          "pattern": {
            "description": "Ability data has to match with this pattern",
            "type": "string"
          },
          "multipleOf": {
            "description": "Ability data has to be multiple of",
            "type": "number"
          },
          "minimum": {
            "description": "Ability data has to be upper or equal to this value",
            "type": "number"
          },
          "maximum": {
            "description": "Ability data has to be lower or equal to this value",
            "type": "number"
          },
          "exclusiveMaximum": {
            "description": "Ability data has to be lower than maximum value",
            "type": "boolean"
          },
          "exclusiveMinimum": {
            "description": "Ability data has to be upper than minimum value",
            "type": "boolean"
          },
          "createdAt": {
            "description": "Creation date timestamp",
            "type": "string"
          },
          "updatedAt": {
            "description": "Last update date timestamp",
            "type": "string"
          }
        },
        "required": ["_id", "name", "_service"],
        "additionalProperties": false,
        "example": {
          "_id": "1223123",
          "name": "foo-ability-name",
          "_service": "fdaq3r341212fsf",
          "_user": "132defwer4321312",
          "description": "Rele control",
          "event": true,
          "eventDescription": "Rele has changed state",
          "action": true,
          "actionDescription": "Changes rele state",
          "state": true,
          "stateDescription": "Current rele state",
          "type": "boolean",
          "createdAt": "2018-07-28T17:13:08.718Z",
          "updatedAt": "2018-07-28T17:13:09.730Z"
        }
      },
      "NewAbility": {
        "description": "New ability data",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the ability",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]*$"
          },
          "_service": {
            "description": "Unique id of the service owner of the ability",
            "type": "string"
          },
          "description": {
            "description": "Description of the ability",
            "type": "string"
          },
          "event": {
            "description": "Ability is able to dispatch event",
            "type": "boolean"
          },
          "eventDescription": {
            "description": "Description of the ability event",
            "type": "string"
          },
          "action": {
            "description": "Ability is able to handle an action",
            "type": "boolean"
          },
          "actionDescription": {
            "description": "Description of the ability action",
            "type": "string"
          },
          "state": {
            "description": "Ability has an state",
            "type": "boolean"
          },
          "stateDescription": {
            "description": "Description of the ability state",
            "type": "string"
          },
          "type": {
            "description": "Type of ability data",
            "type": "string",
            "enum": ["string", "boolean", "number", "integer", "float"]
          },
          "format": {
            "description": "Format of ability data",
            "type": "string",
            "enum": ["date-time", "email", "hostname", "ipv4", "ipv6", "uri"]
          },
          "enum": {
            "description": "If present, ability data has to be one of these items",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "maxLength": {
            "description": "Max length of ability data",
            "type": "integer"
          },
          "minLength": {
            "description": "Min length of ability data",
            "type": "integer"
          },
          "pattern": {
            "description": "Ability data has to match with this pattern",
            "type": "string"
          },
          "multipleOf": {
            "description": "Ability data has to be multiple of",
            "type": "number"
          },
          "minimum": {
            "description": "Ability data has to be upper or equal to this value",
            "type": "number"
          },
          "maximum": {
            "description": "Ability data has to be lower or equal to this value",
            "type": "number"
          },
          "exclusiveMaximum": {
            "description": "Ability data has to be lower than maximum value",
            "type": "boolean"
          },
          "exclusiveMinimum": {
            "description": "Ability data has to be upper than minimum value",
            "type": "boolean"
          }
        },
        "required": ["name"],
        "additionalProperties": false,
        "example": {
          "name": "foo-ability-name",
          "_service": "foo-service-id",
          "description": "Rele control",
          "event": true,
          "eventDescription": "Rele has changed state",
          "action": true,
          "actionDescription": "Changes rele state",
          "state": true,
          "stateDescription": "Current rele state",
          "type": "boolean"
        }
      },
      "UpdateAbility": {
        "description": "Update ability data",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the ability",
            "type": "string"
          },
          "eventDescription": {
            "description": "Description of the ability event",
            "type": "string"
          },
          "actionDescription": {
            "description": "Description of the ability action",
            "type": "string"
          },
          "stateDescription": {
            "description": "Description of the ability state",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "description": "Rele control",
          "eventDescription": "Rele has changed state",
          "actionDescription": "Changes rele state",
          "stateDescription": "Current rele state"
        }
      },
      "Abilities": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Ability"
        }
      },
      "AbilityData": {
        "description": "Data that abilities actions, states and events can handle",
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [{
              "type": "string"
            }, {
              "type": "boolean"
            }, {
              "type": "number"
            }]
          }
        },
        "additionalProperties": false,
        "example": {
          "data": "Foo data"
        }
      }
    },
    "responses": {
      "Ability": {
        "description": "Ability added or modified",
        "headers": {
          "location": {
            "$ref": "#/components/headers/ContentLocation"
          }
        }
      },
      "AbilityAction": {
        "description": "Ability action successfully dispatched",
        "headers": {
          "location": {
            "$ref": "#/components/headers/ContentLocation"
          }
        }
      },
      "AbilityEvent": {
        "description": "Ability event successfully triggered",
        "headers": {
          "location": {
            "$ref": "#/components/headers/ContentLocation"
          }
        }
      },
      "Deleted": {
        "description": "Entity deleted"
      },
      "NotFoundError" : {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "example": {
                    "statusCode": 404,
                    "error": "Not Found",
                    "message": "Item not found"
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "paths": {
    "/abilities": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "service",
            "schema": {
              "type": "string"
            },
            "description": "Service id owner of the ability"
          }
        ],
        "tags": ["ability"],
        "summary": "Get abilities",
        "description": "List abilities, applying a filter if received",
        "operationId": "getAbilities",
        "responses": {
          "200": {
            "description": "Get abilities success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Abilities"
                }
              }
            }
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      },
      "post": {
        "tags": ["ability"],
        "summary": "Add a new ability",
        "description": "Register a new ability",
        "operationId": "addAbility",
        "requestBody": {
          "description": "Data of the ability to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAbility"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Ability"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError"
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      }
    },
    "/abilities/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Ability id"
          }
        ],
        "tags": ["ability"],
        "summary": "Returns ability data",
        "description": "Returns all data about an ability",
        "operationId": "getAbility",
        "responses": {
          "200": {
            "description": "ability success",
            "content": {
              "application/json": {
                "schema" : {
                  "$ref": "#/components/schemas/Ability"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      },
      "patch": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Ability id"
          }
        ],
        "tags": ["ability"],
        "summary": "Update ability data",
        "description": "Update ability data",
        "operationId": "updateAbility",
        "requestBody": {
          "description": "Data of the ability to be modified",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAbility"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/Ability"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Ability id"
          }
        ],
        "tags": ["ability"],
        "summary": "Delete ability",
        "description": "Delete ability",
        "operationId": "deleteAbility",
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      }
    },
    "/abilities/{id}/action": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Ability id"
          }
        ],
        "tags": ["ability", "action"],
        "summary": "Dispatches an ability action",
        "description": "Dispatches a request to the correspondant ability action.",
        "operationId": "abilityAction",
        "requestBody": {
          "description": "Data of the action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbilityData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AbilityAction"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      }
    },
    "/abilities/{id}/state": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Ability id"
          }
        ],
        "tags": ["ability", "state"],
        "summary": "Get ability state",
        "description": "Controller makes a request to the ability in order to return the state.",
        "operationId": "abilityState",
        "responses": {
          "200": {
            "description": "Get ability state success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbilityData"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      }
    },
    "/abilities/{id}/event": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Ability id"
          }
        ],
        "tags": ["ability", "event"],
        "summary": "Triggers an ability event",
        "description": "Used to inform that an ability event was triggered. Intended to be used only by services",
        "operationId": "abilityEvent",
        "requestBody": {
          "description": "Data of the event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbilityData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AbilityEvent"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "security": [{
          "jwt": []
        }, {
          "apiKey": []
        }]
      }
    }
  }
}
